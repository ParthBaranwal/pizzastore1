openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /users/{userId}:
    get:
      tags:
        - user-controller
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user-controller
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/products/{id}:
    get:
      tags:
        - products-controller
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - products-controller
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Products'
    delete:
      tags:
        - products-controller
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/cart/update:
    put:
      tags:
        - cart-controller
      operationId: updateCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cart'
  /users/register:
    post:
      tags:
        - user-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/products:
    get:
      tags:
        - products-controller
      operationId: getAllProducts
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
    post:
      tags:
        - products-controller
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Products'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Products'
  /api/payments:
    post:
      tags:
        - payment-controller
      operationId: processPayment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PaymentResponse'
  /api/orders/{orderId}/delivery:
    post:
      tags:
        - order-controller
      operationId: updateDeliveryDetails
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cart/create:
    post:
      tags:
        - cart-controller
      operationId: createCartForUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cart'
  /api/cart/checkout/{cartId}:
    post:
      tags:
        - cart-controller
      operationId: checkout
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Orders'
  /api/cart/add:
    post:
      tags:
        - cart-controller
      operationId: addToCart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CartDTO'
  /users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/products/toppings:
    get:
      tags:
        - products-controller
      operationId: getAllToppings
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
  /api/products/sides:
    get:
      tags:
        - products-controller
      operationId: getAllSides
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
  /api/products/pizzas:
    get:
      tags:
        - products-controller
      operationId: getAllPizzas
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
  /api/products/beverages:
    get:
      tags:
        - products-controller
      operationId: getAllBeverages
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
  /api/orders:
    get:
      tags:
        - order-controller
      operationId: getAllOrders
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Orders'
  /api/orders/{orderId}:
    get:
      tags:
        - order-controller
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Orders'
  /api/cart/{cartId}:
    get:
      tags:
        - cart-controller
      operationId: getCartById
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CartDTO'
  /addresses:
    get:
      tags:
        - address-controller
      operationId: getAllAddresses
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  /addresses/user/{userId}:
    get:
      tags:
        - address-controller
      operationId: getAddressesByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
  /api/cart/remove:
    delete:
      tags:
        - cart-controller
      operationId: removeFromCart
      parameters:
        - name: cartId
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - name: productId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cart'
  /api/cart/clear:
    delete:
      tags:
        - cart-controller
      operationId: clearCart
      parameters:
        - name: cartId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Cart'
components:
  schemas:
    AddressRequest:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
    UserUpdateRequest:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressRequest'
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        userName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    Products:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
        category:
          type: string
          enum:
            - PIZZA
            - BEVERAGE
            - SIDE
            - TOPPING
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CartItemRequest:
      type: object
      properties:
        cartId:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        pizzaSize:
          type: string
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        crustType:
          type: string
          enum:
            - THIN
            - THICK
            - STUFFED
        beverageSize:
          type: string
          enum:
            - SHORT
            - TALL
            - VENTI
            - GRANDE
            - TRENTA
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
        user:
          $ref: '#/components/schemas/User'
    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/Products'
        quantity:
          type: integer
          format: int32
        totalPrice:
          type: number
        cart:
          $ref: '#/components/schemas/Cart'
        pizzaSize:
          type: string
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        crustType:
          type: string
          enum:
            - THIN
            - THICK
            - STUFFED
        beverageSize:
          type: string
          enum:
            - SHORT
            - TALL
            - VENTI
            - GRANDE
            - TRENTA
    UserRegisterRequest:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
    PaymentDetails:
      type: object
      properties:
        cardNumber:
          type: string
        expiryDate:
          type: string
        cvv:
          type: string
        upiId:
          type: string
    PaymentRequest:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        paymentMethod:
          type: string
          enum:
            - CARD
            - UPI
            - COD
        paymentDetails:
          $ref: '#/components/schemas/PaymentDetails'
    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
        paymentStatus:
          type: string
          enum:
            - PENDING
            - PAID
            - FAIL
            - UNPAID
        paymentTime:
          type: string
          format: date-time
    DeliveryRequest:
      type: object
      properties:
        addressId:
          type: integer
          format: int64
        address:
          $ref: '#/components/schemas/Address'
    CreateCartRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order:
          $ref: '#/components/schemas/Orders'
        product:
          $ref: '#/components/schemas/Products'
        quantity:
          type: integer
          format: int32
        price:
          type: number
        pizzaSize:
          type: string
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        crustType:
          type: string
          enum:
            - THIN
            - THICK
            - STUFFED
        beverageSize:
          type: string
          enum:
            - SHORT
            - TALL
            - VENTI
            - GRANDE
            - TRENTA
    Orders:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        orderDate:
          type: string
          format: date-time
        totalAmount:
          type: number
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        paymentStatus:
          type: string
          enum:
            - PENDING
            - PAID
            - FAIL
            - UNPAID
        deliveryAddress:
          $ref: '#/components/schemas/Address'
    CartDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDTO'
        totalAmount:
          type: number
    CartItemDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/ProductDTO'
        quantity:
          type: integer
          format: int32
        totalPrice:
          type: number
        pizzaSize:
          type: string
          enum:
            - SMALL
            - MEDIUM
            - LARGE
        crustType:
          type: string
          enum:
            - THIN
            - THICK
            - STUFFED
        beverageSize:
          type: string
          enum:
            - SHORT
            - TALL
            - VENTI
            - GRANDE
            - TRENTA
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
        category:
          type: string
        description:
          type: string
